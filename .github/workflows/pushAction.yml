# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install Wireguard
        run: sudo apt-get install wireguard
        
      - name: Create Wireguard Tunnel Configuration
        run: |
          cat <<EOF > wg0.conf
          [Interface]
          PrivateKey = ${{ secrets.WG_RUNNER_PRIVATE_KEY }}
          Address = ${{ secrets.WG_RUNNER_IP }}
          [Peer]
          PublicKey = ${{ secrets.WG_SERVER_PUBLIC_KEY }}
          AllowedIPs = ${{ secrets.WG_CIDR_ALLOWED }}
          Endpoint = ${{ secrets.WG_SERVER_ENDPOINT }}
          PersistentKeepalive = 15
          EOF
          sudo mv $GITHUB_WORKSPACE/wg0.conf /etc/wireguard/
          
      - name: Starting Wireguard
        run: sudo wg-quick up wg0
      
      # PING Server
      - name: Ping Remote Server
        run: ping -c 3 10.184.0.3
      
      # SCP TAR files containing repository to remote server
      - name: Copy Files via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.KEY }}
          source: "hw.txt,index.html,dockerdeploy.sh,Dockerfile"
          target: "/etc/mnt"
      
      # Set Up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Set Up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Login to Dockerhub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Get Current Date and Commit sh for Docker image tag
      - name: Create tag for Current Image
        id: tagstep
        run: |
          echo "::set-output name=today::$(date +'%Y%m%d')"
          echo "::set-output name=commitsh::$(git rev-parse --short HEAD)"
      #    echo "::set-output name=commitsh::$(echo ${{ steps.tagstep.outputs.today }}-${{ steps.tagstep.outputs.commitsh }})"

      # Build and Push Docker Image to Dockerhub
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: akbarezeki/taskaction:dev-${{ steps.tagstep.outputs.today }}-${{ steps.tagstep.outputs.commitsh }}

      - name: Run New Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            chmod +x ${ GITHUB_WORKSPACE }/dockerdeploy.sh
            ${ GITHUB_WORKSPACE }/dockerdeploy.sh