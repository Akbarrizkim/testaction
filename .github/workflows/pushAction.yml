# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

#       # Install and runs Wireguard to open a VPN channel to the remote server
#       - name: WireGuard SSH
#         uses: omahn/wireguard-ssh-github-action@v1.4
#         with:
#           # Required. IP address of your WireGuard peer/endpoint. Must be publicly reachable.
#           peer_ip: ${{ secrets.HOST }}
#           # Required. SSH public key as a string.
#           ssh_public_key: ${{ secrets.PUBLICKEY }}
#           # Port of WireGuard peer.
#           peer_port: ${{ secrets.PORT }}
#           # Private IP of GitHub WireGuard peer.
#           github_ip: '192.168.192.1'
#           # Seconds to wait for SSH connection.
#           ssh_connection_timeout: '300'
#           # Seconds to timeout SSH session.
#           session_timeout: 3600
          
      # SCP TAR files containing repository to remote server
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.KEY }}
          source: "hw.txt"
          target: "/etc/mnt"
